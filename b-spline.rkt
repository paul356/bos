#lang racket
(define (vector-len v)
 (if (null? v)
  0
  (+ 1 (vector-len (cdr v)))))

(define (list-tail lst)
 (if (null? (cdr lst))
  (car lst)
  (list-tail (cdr lst))))

(define (repeat-elemt e k)
 (if (= k 0)
  '()
  (if (= k 1)
   (list e)
   (cons e (repeat-elemt e (- k 1))))))

(define (range-list n bias)
 (if (= n 0)
  '()
  (append (range-list (- n 1) bias) (list (+ n bias)))))
(define (splice-list lst beg n)
  (if (> beg 0)
      (splice-list (cdr lst) (- beg 1) n)
      (if (> n 0)
          (cons (car lst) (splice-list (cdr lst) beg (- n 1)))
          '())))

(define (b-spline point-list)
 (define len (vector-len point-list))
 (define bias (/ len -2.0))
 (define knot-vect
  (append (append (repeat-elemt bias 4) (range-list (- len 4) bias)) (repeat-elemt (+ (- len 3) bias) 4)))
 (define knot-vect-3 (cdr (cdr (cdr knot-vect))))
 (define knot-vect-2 (cdr (cdr knot-vect)))
 (define knot-vect-1 (cdr knot-vect))
 (define (calc-point t)
   ; get the position for t in knot list
   (define (get-span t vect-list)
     (if (null? vect-list)
         '()
         (if (< (car vect-list) t)
             (+ 1 (get-span t (cdr vect-list)))
             -1)))
   (define span (get-span t knot-vect))
   (define pts-lst (reverse (splice-list point-list (- span 3) 4)))
   (define kts-lst (reverse (splice-list knot-vect (- span 2) 3)))
   (define kts-lst-3 (reverse (splice-list knot-vect-3 (- span 2) 3)))
   (define kts-lst-2 (reverse (splice-list knot-vect-2 (- span 2) 3)))
   (define kts-lst-1 (reverse (splice-list knot-vect-1 (- span 2) 3)))
   (define (gen-pts-pairs pts-l n)
     (if (= n 1)
         '()
         (cons (cons (car pts-l) (car (cdr pts-l))) (gen-pts-pairs (cdr pts-l) (- n 1)))))
   (define (calc-pts-params kts-l kts-l-j n)
     (if (= n 0)
         '()
         (let ([kt (car kts-l)]
               [kt-j (car kts-l-j)])
           (cons (cons (/ (- t kt) (- kt-j kt)) (/ (- kt-j t) (- kt-j kt))) (calc-pts-params (cdr kts-l) (cdr kts-l-j) (- n 1))))))
   (define pts-params-3 (calc-pts-params kts-lst kts-lst-3 3))
   (define pts-params-2 (calc-pts-params kts-lst kts-lst-2 2))
   (define pts-params-1 (calc-pts-params kts-lst kts-lst-1 1))
   (define (mult-pts-params pts-pairs pts-params)
     (if (null? pts-pairs)
         '()
         (cons (+ (* (caar pts-pairs) (caar pts-params)) (* (cdar pts-pairs) (cdar pts-params))) (mult-pts-params (cdr pts-pairs) (cdr pts-params)))))
   (mult-pts-params (gen-pts-pairs 
                     (mult-pts-params 
                      (gen-pts-pairs 
                       (mult-pts-params 
                        (gen-pts-pairs pts-lst 4) 
                        pts-params-3) 
                       3) 
                      pts-params-2) 
                     2) 
                    pts-params-1))
  (define (iter-bspline beg end div) 
   (if (< beg end)
    (cons (car (calc-point beg)) (iter-bspline (+ beg div) end div))
    '()))
  (iter-bspline -3.49 0.5 0.01))

(define (display-bar v base incr)
 (define (repeat-char str times)
  (if (<= times 0)
   ""
   (string-append str (repeat-char str (- times 1)))))
 (display (repeat-char "-" (/ (- v base) incr)))
 (newline))
;(for-each (lambda (x) (display-bar x 1.0 0.1)) (b-spline '(1 2 1 2 1 2 1)))
(b-spline '(1 2 3 2 1 2 4))
;(for-each (lambda (x) (display-bar x 1.0 0.1)) (list 1.5 1.1 2))
;(display-bar 1.2 1 0.1)
;(b-spline '(1 2 1 2 1 2 1))
